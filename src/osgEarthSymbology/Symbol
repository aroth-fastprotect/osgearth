/* -*-c++-*- */
/* osgEarth - Dynamic map generation toolkit for OpenSceneGraph
 * Copyright 2008-2012 Pelican Mapping
 * http://osgearth.org
 *
 * osgEarth is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */

#ifndef OSGEARTHSYMBOLOGY_SYMBOL_H
#define OSGEARTHSYMBOLOGY_SYMBOL_H 1

#include <osgEarthSymbology/Common>
#include <osgEarth/Config>
#include <osgEarth/URI>
#include <osg/Referenced>
#include <vector>

#define META_Symbol(name) \
    virtual bool isSameKindAs(const Symbol* rhs) const { return dynamic_cast<const name *>(rhs)!=NULL; } \
    virtual const char* className() const { return #name; }


namespace osgEarth { namespace Symbology
{
    /**
     * Abstract base class for all Symbol types.
     */
    class OSGEARTHSYMBOLOGY_EXPORT Symbol : public osg::Referenced
    {
    public:
        const URIContext& uriContext() const { return _uriContext; }

        virtual Config getConfig() const { return Config(); }

    public: // META_Symbol methods
        virtual bool isSameKindAs(const Symbol* sym) const =0;
        virtual const char* className() const =0;

    protected:
        URIContext _uriContext;

        static bool match(const std::string& key, const char* pattern);

        Symbol( const Config& conf =Config() );

        virtual ~Symbol() { }
    };
    typedef std::vector<osg::ref_ptr<Symbol> > SymbolList;

} } // namespace osgEarth::Symbology

#endif // OSGEARTH_SYMBOLOGY_SYMBOL_H
