/* -*-c++-*- */
/* osgEarth - Dynamic map generation toolkit for OpenSceneGraph
 * Copyright 2008-2012 Pelican Mapping
 * http://osgearth.org
 *
 * osgEarth is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */
#ifndef OSGEARTH_ENGINE_BYO_OPTIONS
#define OSGEARTH_ENGINE_BYO_OPTIONS 1

#include <osgEarth/Common>
#include <osgEarth/TerrainOptions>
#include <osgEarth/URI>

namespace osgEarth { namespace Drivers
{
    using namespace osgEarth;

    /**
     * Options for configuring the Bring Your Own Engine driver.
     */
    class BYOTerrainEngineOptions : public TerrainOptions // NO EXPORT (header-only)
    {
    public:
        BYOTerrainEngineOptions( const ConfigOptions& options =ConfigOptions() ) : TerrainOptions( options )
        {
            setDriver( "byo" );
            fromConfig( _conf );
        }

        /** dtor */
        virtual ~BYOTerrainEngineOptions() { }

    public:
        optional<URI>& url() { return _uri; }
        const optional<URI>& url() const { return _uri; }

    public: // non-serializable
        void setNode(osg::Node* node);
        osg::Node* getNode() { return _node.get(); }

    protected:
        virtual Config getConfig() const {
            Config conf = TerrainOptions::getConfig();
            conf.updateIfSet( "url", _uri );
            conf.updateNonSerializable( "node", _node.get() );
            return conf;
        }

        virtual void mergeConfig( const Config& conf ) {
            TerrainOptions::mergeConfig( conf );
            fromConfig( conf );
        }

    private:
        void fromConfig( const Config& conf ) {
            conf.getIfSet( "url", _uri );
            _node = conf.getNonSerializable<osg::Node>( "node" );
        }

        optional<URI>           _uri;
        osg::ref_ptr<osg::Node> _node;
    };

} } // namespace osgEarth::Drivers

#endif // OSGEARTH_ENGINE_MP_OPTIONS
