/* -*-c++-*- */
/* osgEarth - Dynamic map generation toolkit for OpenSceneGraph
 * Copyright 2008-2012 Pelican Mapping
 * http://osgearth.org
 *
 * osgEarth is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */

#ifndef OSGEARTH_FADE_EFFECT_H
#define OSGEARTH_FADE_EFFECT_H 1

#include <osgEarth/Common>
#include <osgEarth/ThreadingUtils>
#include <osg/Group>
#include <osg/Uniform>

namespace osgEarth
{
    /**
     * Decorator node that will only display it's children when the camera is within a given elevation range
     */
    class OSGEARTH_EXPORT FadeEffect : public osg::Group
    {
    public:
        /**
         * Creates a uniform that set the start time for a timed fade. Typically you
         * will set this right after adding the node to the scene graph. The value
         * is a FLOAT in seconds. You can apply this uniform to the FadeEffect node
         * or elsewhere in the scene graph.
         */
        static osg::Uniform* createStartTimeUniform();

    public:
        FadeEffect();
        virtual ~FadeEffect() { }

        void setFadeDuration( float seconds );
        float getFadeDuration() const;

    private:
        osg::ref_ptr<osg::Uniform> _fadeDuration;
    };


    class OSGEARTH_EXPORT FadeLOD : public osg::Group
    {
    public:
        FadeLOD();
        virtual ~FadeLOD() { }

        void setMinPixelExtent( float value ) { _minPixelExtent = value; }
        float getMinPixelExtent() const { return _minPixelExtent; }

        void setMaxPixelExtent( float value ) { _maxPixelExtent = value; }
        float getMaxPixelExtent() const { return _maxPixelExtent; }

        void setMinFadeExtent( float value ) { _minFadeExtent = value; }
        float getMinFadeExtent() const { return _minFadeExtent; }

        void setMaxFadeExtent( float value ) { _maxFadeExtent = value; }
        float getMaxFadeExtent() const { return _maxFadeExtent; }

    public: // osg::Node

        virtual void traverse(osg::NodeVisitor& nv );

    protected:
        struct PerViewData
        {
            osg::ref_ptr<osg::StateSet> _stateSet;
            osg::ref_ptr<osg::Uniform>  _opacity;
        };
        Threading::PerObjectMap<osg::NodeVisitor*, PerViewData> _perViewData;

        float _minPixelExtent;
        float _maxPixelExtent;
        float _minFadeExtent;
        float _maxFadeExtent;
    };

} // namespace osgEarth

#endif // OSGEARTH_FADE_EFFECT_H
