/* -*-c++-*- */
/* osgEarth - Dynamic map generation toolkit for OpenSceneGraph
 * Copyright 2008-2009 Pelican Ventures, Inc.
 * http://osgearth.org
 *
 * osgEarth is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */
#ifndef OSGEARTH_DRIVER_SQLITE3_CACHE_DRIVEROPTIONS
#define OSGEARTH_DRIVER_SQLITE3_CACHE_DRIVEROPTIONS 1

#include <osgEarth/Common>
#include <osgEarth/TileSource>

using namespace osgEarth;

// there is leak using the cache if compressed. It's resolved in
// rev 11609 of osg svn

namespace osgEarth { namespace Drivers
{
    class Sqlite3CacheOptions : public DriverOptions // NO EXPORT; header only
    {
    public:
        /**
         * Pathname of the database file.
         */
        optional<std::string>& path() { return _path; }
        const optional<std::string>& path() const { return _path; }

        optional<bool>& asyncWrites() { return _useAsyncWrites; }
        const optional<bool>& asyncWrites() const { return _useAsyncWrites; }

        optional<bool>& serialized() { return _serialized; }
        const optional<bool>& serialized() const { return _serialized; }

        optional<unsigned int>& maxSize() { return _maxSize; }
        const optional<unsigned int>& maxSize() const { return _maxSize; }


    public:
        Sqlite3CacheOptions( const PluginOptions* opt =0L )
            : DriverOptions( opt ), _useAsyncWrites( true ), _serialized( false )
        {
            
            driver() = "cache_sqlite3";
            config().getIfSet( "path", _path );
            config().getIfSet( "async_writes", _useAsyncWrites );
            config().getIfSet( "serialized", _serialized );
            config().getIfSet( "max_size", _maxSize );
        }

    protected:
        Config toConfig() const {
            Config conf = DriverOptions::toConfig();
            conf.updateIfSet( "path", _path );
            conf.updateIfSet( "async_writes", _useAsyncWrites );
            conf.updateIfSet( "serialized", _serialized );
            conf.updateIfSet( "max_size", _maxSize );
            return conf;
        }

        optional<std::string> _path;
        optional<bool> _useAsyncWrites;
        optional<bool> _serialized;
        optional<unsigned int>_maxSize; // layer - MB
    };

} } // namespace osgEarth::Drivers

#endif // OSGEARTH_DRIVER_SQLITE3_CACHE_DRIVEROPTIONS

